# -*- coding: utf-8 -*-
"""SomnoPredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C0aFGwQUwclwm7gu6m1-sEhVKWE2xgOw
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import pickle

df = pd.read_csv("Sleep_health_and_lifestyle_dataset.csv")
df.head()

# Drop irrelevant column
df = df.drop("Person ID", axis=1)

# Split Blood Pressure
df[['SystolicBP','DiastolicBP']] = df['Blood Pressure'].str.split('/', expand=True)
df['SystolicBP'] = df['SystolicBP'].astype(int)
df['DiastolicBP'] = df['DiastolicBP'].astype(int)
df = df.drop("Blood Pressure", axis=1)

# Encode categorical variables
categorical_cols = ["Gender", "Occupation", "BMI Category", "Sleep Disorder"]
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# Features & target
X = df.drop("Sleep Duration", axis=1)
y = df["Sleep Duration"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numeric values
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

lin_model = LinearRegression()
lin_model.fit(X_train, y_train)
lin_pred = lin_model.predict(X_test)

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

def evaluate(y_true, y_pred, name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    print(f"{name} â†’ MAE: {mae:.2f}, RMSE: {rmse:.2f}, R2: {r2:.2f}")

evaluate(y_test, lin_pred, "Linear Regression")
evaluate(y_test, rf_pred, "Random Forest")

best_model = rf_model  # if Random Forest is best
with open("somnopredict_model.pkl", "wb") as f:
    pickle.dump(best_model, f)

files.download("somnopredict_model.pkl")#made the model, now we can make a website for it